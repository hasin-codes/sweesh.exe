name: Build & Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.4.3, v1.5.0, etc.
  workflow_dispatch:  # Allows manual trigger from GitHub Actions tab

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false  # Continue building other platforms even if one fails
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win
          - os: ubuntu-latest
            platform: linux
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      # Generate .icns file for macOS if it doesn't exist
      - name: Generate macOS icon
        if: matrix.os == 'macos-latest'
        run: |
          if [ ! -f "public/icons/logo.icns" ]; then
            echo "‚ö†Ô∏è  logo.icns not found, generating from PNG..."
            # Install iconutil dependencies
            brew install imagemagick
            
            # Create iconset directory
            mkdir -p logo.iconset
            
            # Generate all required icon sizes from logo.png
            magick public/icons/logo.png -resize 16x16 logo.iconset/icon_16x16.png
            magick public/icons/logo.png -resize 32x32 logo.iconset/icon_16x16@2x.png
            magick public/icons/logo.png -resize 32x32 logo.iconset/icon_32x32.png
            magick public/icons/logo.png -resize 64x64 logo.iconset/icon_32x32@2x.png
            magick public/icons/logo.png -resize 128x128 logo.iconset/icon_128x128.png
            magick public/icons/logo.png -resize 256x256 logo.iconset/icon_128x128@2x.png
            magick public/icons/logo.png -resize 256x256 logo.iconset/icon_256x256.png
            magick public/icons/logo.png -resize 512x512 logo.iconset/icon_256x256@2x.png
            magick public/icons/logo.png -resize 512x512 logo.iconset/icon_512x512.png
            magick public/icons/logo.png -resize 1024x1024 logo.iconset/icon_512x512@2x.png
            
            # Convert to .icns
            iconutil -c icns logo.iconset -o public/icons/logo.icns
            
            # Cleanup
            rm -rf logo.iconset
            
            echo "‚úÖ Generated logo.icns successfully"
          else
            echo "‚úÖ logo.icns already exists"
          fi
      
      - name: Build for ${{ matrix.platform }}
        run: npm run dist:${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: List build artifacts
        run: |
          echo "üì¶ Build artifacts:"
          ls -lh dist/
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sweesh-${{ matrix.platform }}
          path: |
            dist/*.exe
            dist/*.exe.blockmap
            dist/*.dmg
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
          retention-days: 30
  
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Display structure
        run: |
          echo "üì¶ Downloaded artifacts:"
          ls -R artifacts/
      
      - name: Prepare release files
        run: |
          mkdir -p release-files
          find artifacts -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.blockmap" \) -exec cp {} release-files/ \;
          echo "üì¶ Release files ready:"
          ls -lh release-files/
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## üéâ Multi-Platform Release
            
            ### üì• Downloads
            
            **Windows Users:**
            - Download `Sweesh-Setup-${{ github.ref_name }}.exe`
            
            **macOS Users:**
            - **Apple Silicon (M1/M2/M3):** Download `Sweesh-${{ github.ref_name }}-arm64.dmg`
            - **Intel Macs:** Download `Sweesh-${{ github.ref_name }}-x64.dmg`
            - **Universal:** Download `Sweesh-${{ github.ref_name }}.dmg`
            
            **Linux Users (Experimental):**
            - Download `Sweesh-${{ github.ref_name }}.AppImage`
            
            ### üîß macOS First-Time Setup
            1. Open the DMG file
            2. Drag Sweesh to Applications folder
            3. Right-click Sweesh ‚Üí Open (for unsigned builds)
            4. Grant permissions when prompted:
               - ‚úÖ Microphone access (required for voice recording)
               - ‚úÖ Accessibility access (required for global keyboard shortcuts)
            
            ### üìù Full release notes below ‚¨áÔ∏è
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
